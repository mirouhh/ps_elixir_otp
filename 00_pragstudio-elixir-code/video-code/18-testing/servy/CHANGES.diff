--- a/lib/servy/handler.ex
+++ b/lib/servy/handler.ex
@@ -63,100 +63,13 @@ defmodule Servy.Handler do
 
   def format_response(%Conv{} = conv) do
     """
-    HTTP/1.1 #{Conv.full_status(conv)}
-    Content-Type: text/html
-    Content-Length: #{String.length(conv.resp_body)}
-
+    HTTP/1.1 #{Conv.full_status(conv)}\r
+    Content-Type: text/html\r
+    Content-Length: #{String.length(conv.resp_body)}\r
+    \r
     #{conv.resp_body}
     """
   end
 
 end
 
-request = """
-GET /wildthings HTTP/1.1
-Host: example.com
-User-Agent: ExampleBrowser/1.0
-Accept: */*
-
-"""
-
-response = Servy.Handler.handle(request)
-
-IO.puts response
-
-request = """
-GET /bigfoot HTTP/1.1
-Host: example.com
-User-Agent: ExampleBrowser/1.0
-Accept: */*
-
-"""
-
-response = Servy.Handler.handle(request)
-
-IO.puts response
-
-request = """
-GET /wildlife HTTP/1.1
-Host: example.com
-User-Agent: ExampleBrowser/1.0
-Accept: */*
-
-"""
-
-response = Servy.Handler.handle(request)
-
-IO.puts response
-
-
-request = """
-GET /about HTTP/1.1
-Host: example.com
-User-Agent: ExampleBrowser/1.0
-Accept: */*
-
-"""
-
-response = Servy.Handler.handle(request)
-
-IO.puts response
-
-request = """
-POST /bears HTTP/1.1
-Host: example.com
-User-Agent: ExampleBrowser/1.0
-Accept: */*
-Content-Type: application/x-www-form-urlencoded
-Content-Length: 21
-
-name=Baloo&type=Brown
-"""
-
-response = Servy.Handler.handle(request)
-
-IO.puts response
-
-request = """
-GET /bears HTTP/1.1
-Host: example.com
-User-Agent: ExampleBrowser/1.0
-Accept: */*
-
-"""
-
-response = Servy.Handler.handle(request)
-
-IO.puts response
-
-request = """
-GET /bears/1 HTTP/1.1
-Host: example.com
-User-Agent: ExampleBrowser/1.0
-Accept: */*
-
-"""
-
-response = Servy.Handler.handle(request)
-
-IO.puts response
--- a/lib/servy/parser.ex
+++ b/lib/servy/parser.ex
@@ -3,9 +3,9 @@ defmodule Servy.Parser do
   alias Servy.Conv
 
   def parse(request) do
-    [top, params_string] = String.split(request, "\n\n")
+    [top, params_string] = String.split(request, "\r\n\r\n")
 
-    [request_line | header_lines] = String.split(top, "\n")
+    [request_line | header_lines] = String.split(top, "\r\n")
 
     [method, path, _] = String.split(request_line, " ")
 
@@ -29,6 +29,17 @@ defmodule Servy.Parser do
 
   def parse_headers([], headers), do: headers
 
+  @doc """
+  Parses the given param string of the form `key1=value1&key2=value2` 
+  into a map with corresponding keys and values.
+
+  ## Examples
+      iex> params_string = "name=Baloo&type=Brown"
+      iex> Servy.Parser.parse_params("application/x-www-form-urlencoded", params_string)
+      %{"name" => "Baloo", "type" => "Brown"}
+      iex> Servy.Parser.parse_params("multipart/form-data", params_string)
+      %{}
+  """
   def parse_params("application/x-www-form-urlencoded", params_string) do
     params_string |> String.trim |> URI.decode_query
   end
@@ -36,8 +47,3 @@ defmodule Servy.Parser do
   def parse_params(_, _), do: %{}
 
 end
-
-
-
-
-
--- a/lib/servy/plugins.ex
+++ b/lib/servy/plugins.ex
@@ -4,7 +4,9 @@ defmodule Servy.Plugins do
 
   @doc "Logs 404 requests"
   def track(%Conv{status: 404, path: path} = conv) do
-    IO.puts "Warning: #{path} is on the loose!"
+    if Mix.env != :test do
+      IO.puts "Warning: #{path} is on the loose!"
+    end
     conv
   end
 
@@ -16,5 +18,10 @@ defmodule Servy.Plugins do
 
   def rewrite_path(%Conv{} = conv), do: conv
 
-  def log(%Conv{} = conv), do: IO.inspect conv
+  def log(%Conv{} = conv) do
+    if Mix.env == :dev do
+      IO.inspect conv
+    end
+    conv
+  end
 end
--- a/lib/servy/wildthings.ex
+++ b/lib/servy/wildthings.ex
@@ -24,9 +24,4 @@ defmodule Servy.Wildthings do
     id |> String.to_integer |> get_bear
   end
 
-
-
-
-
-
 end
new file mode 100644
--- /dev/null
+++ b/test/handler_test.exs
@@ -0,0 +1,178 @@
+defmodule HandlerTest do
+  use ExUnit.Case
+
+  import Servy.Handler, only: [handle: 1]
+
+  test "GET /wildthings" do
+    request = """
+    GET /wildthings HTTP/1.1\r
+    Host: example.com\r
+    User-Agent: ExampleBrowser/1.0\r
+    Accept: */*\r
+    \r
+    """
+
+    response = handle(request)
+
+    assert response == """
+    HTTP/1.1 200 OK\r
+    Content-Type: text/html\r
+    Content-Length: 20\r
+    \r
+    Bears, Lions, Tigers
+    """
+  end
+
+  test "GET /bears" do
+    request = """
+    GET /bears HTTP/1.1\r
+    Host: example.com\r
+    User-Agent: ExampleBrowser/1.0\r
+    Accept: */*\r
+    \r
+    """
+
+    response = handle(request)
+
+    expected_response = """
+    HTTP/1.1 200 OK\r
+    Content-Type: text/html\r
+    Content-Length: 356\r
+    \r
+    <h1>All The Bears!</h1>
+    
+    <ul>
+      <li>Brutus - Grizzly</li>
+      <li>Iceman - Polar</li>
+      <li>Kenai - Grizzly</li>
+      <li>Paddington - Brown</li>
+      <li>Roscoe - Panda</li>
+      <li>Rosie - Black</li>
+      <li>Scarface - Grizzly</li>
+      <li>Smokey - Black</li>
+      <li>Snow - Polar</li>
+      <li>Teddy - Brown</li>
+    </ul>
+    """
+
+    assert remove_whitespace(response) == remove_whitespace(expected_response)
+  end
+
+  test "GET /bigfoot" do
+    request = """
+    GET /bigfoot HTTP/1.1\r
+    Host: example.com\r
+    User-Agent: ExampleBrowser/1.0\r
+    Accept: */*\r
+    \r
+    """
+
+    response = handle(request)
+
+    assert response == """
+    HTTP/1.1 404 Not Found\r
+    Content-Type: text/html\r
+    Content-Length: 17\r
+    \r
+    No /bigfoot here!
+    """
+  end
+
+  test "GET /bears/1" do
+    request = """
+    GET /bears/1 HTTP/1.1\r
+    Host: example.com\r
+    User-Agent: ExampleBrowser/1.0\r
+    Accept: */*\r
+    \r
+    """
+
+    response = handle(request)
+
+    expected_response = """
+    HTTP/1.1 200 OK\r
+    Content-Type: text/html\r
+    Content-Length: 72\r
+    \r
+    <h1>Show Bear</h1>
+    <p>
+    Is Teddy hibernating? <strong>true</strong>
+    </p>
+    """
+
+    assert remove_whitespace(response) == remove_whitespace(expected_response)
+  end
+
+  test "GET /wildlife" do
+    request = """
+    GET /wildlife HTTP/1.1\r
+    Host: example.com\r
+    User-Agent: ExampleBrowser/1.0\r
+    Accept: */*\r
+    \r
+    """
+
+    response = handle(request)
+
+    assert response == """
+    HTTP/1.1 200 OK\r
+    Content-Type: text/html\r
+    Content-Length: 20\r
+    \r
+    Bears, Lions, Tigers
+    """
+  end
+
+  test "GET /about" do
+    request = """
+    GET /about HTTP/1.1\r
+    Host: example.com\r
+    User-Agent: ExampleBrowser/1.0\r
+    Accept: */*\r
+    \r
+    """
+
+    response = handle(request)
+
+    expected_response = """
+    HTTP/1.1 200 OK\r
+    Content-Type: text/html\r
+    Content-Length: 102\r
+    \r
+    <h1>Clark's Wildthings Refuge</h1>
+
+    <blockquote>
+    When we contemplate the whole globe...
+    </blockquote>    
+    """
+
+    assert remove_whitespace(response) == remove_whitespace(expected_response)
+  end
+
+  test "POST /bears" do
+    request = """
+    POST /bears HTTP/1.1\r
+    Host: example.com\r
+    User-Agent: ExampleBrowser/1.0\r
+    Accept: */*\r
+    Content-Type: application/x-www-form-urlencoded\r
+    Content-Length: 21\r
+    \r
+    name=Baloo&type=Brown
+    """
+
+    response = handle(request)
+
+    assert response == """
+    HTTP/1.1 201 Created\r
+    Content-Type: text/html\r
+    Content-Length: 33\r
+    \r
+    Created a Brown bear named Baloo!
+    """
+  end
+
+  defp remove_whitespace(text) do
+    String.replace(text, ~r{\s}, "")
+  end 
+end
new file mode 100644
--- /dev/null
+++ b/test/parser_test.exs
@@ -0,0 +1,14 @@
+defmodule ParserTest do
+  use ExUnit.Case
+  doctest Servy.Parser
+
+  alias Servy.Parser
+
+  test "parses a list of header fields into a map" do
+    header_lines = ["A: 1", "B: 2"]
+
+    headers = Parser.parse_headers(header_lines, %{})
+
+    assert headers == %{"A" => "1", "B" => "2"}
+  end
+end
