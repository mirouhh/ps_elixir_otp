--- a/lib/servy.ex
+++ b/lib/servy.ex
@@ -1,7 +1,8 @@
 defmodule Servy do
-  def hello(name) do
-    "Howdy, #{name}!"
+  use Application
+
+  def start(_type, _args) do
+    IO.puts "Starting the application..."
+    Servy.Supervisor.start_link()
   end
 end
-
-# IO.puts Servy.hello("Elixir")
--- a/lib/servy/kick_starter.ex
+++ b/lib/servy/kick_starter.ex
@@ -20,7 +20,8 @@ defmodule Servy.KickStarter do
 
   defp start_server do
     IO.puts "Starting the HTTP server..."
-    server_pid = spawn_link(Servy.HttpServer, :start, [4000])
+    port = Application.get_env(:servy, :port)
+    server_pid = spawn_link(Servy.HttpServer, :start, [port])
     Process.register(server_pid, :http_server)
     server_pid
   end
--- a/mix.exs
+++ b/mix.exs
@@ -4,6 +4,7 @@ defmodule Servy.Mixfile do
   def project do
     [
       app: :servy,
+      description: "A humble HTTP server",
       version: "0.1.0",
       elixir: "~> 1.14",
       start_permanent: Mix.env() == :prod,
@@ -14,7 +15,9 @@ defmodule Servy.Mixfile do
   # Run "mix help compile.app" to learn about applications.
   def application do
     [
-      extra_applications: [:logger, :eex, :observer, :wx, :runtime_tools]
+      extra_applications: [:logger, :eex, :observer, :wx, :runtime_tools],
+      mod: {Servy, []},
+      env: [port: 3000]
     ]
   end
 
