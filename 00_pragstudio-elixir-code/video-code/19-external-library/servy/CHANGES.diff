new file mode 100644
--- /dev/null
+++ b/lib/servy/api/bear_controller.ex
@@ -0,0 +1,11 @@
+defmodule Servy.Api.BearController do
+  
+  def index(conv) do
+    json =
+      Servy.Wildthings.list_bears()
+      |> Poison.encode!
+
+    %{ conv | status: 200, resp_content_type: "application/json", resp_body: json }
+  end
+
+end
--- a/lib/servy/conv.ex
+++ b/lib/servy/conv.ex
@@ -3,6 +3,7 @@ defmodule Servy.Conv do
             path: "", 
             params: %{},
             headers: %{},
+            resp_content_type: "text/html",
             resp_body: "", 
             status: nil
 
--- a/lib/servy/handler.ex
+++ b/lib/servy/handler.ex
@@ -25,6 +25,10 @@ defmodule Servy.Handler do
     %{ conv | status: 200, resp_body: "Bears, Lions, Tigers" }          
   end
 
+  def route(%Conv{ method: "GET", path: "/api/bears" } = conv) do
+    Servy.Api.BearController.index(conv)
+  end
+
   def route(%Conv{ method: "GET", path: "/bears" } = conv) do
     BearController.index(conv)
   end
@@ -64,7 +68,7 @@ defmodule Servy.Handler do
   def format_response(%Conv{} = conv) do
     """
     HTTP/1.1 #{Conv.full_status(conv)}\r
-    Content-Type: text/html\r
+    Content-Type: #{conv.resp_content_type}\r
     Content-Length: #{String.length(conv.resp_body)}\r
     \r
     #{conv.resp_body}
--- a/mix.exs
+++ b/mix.exs
@@ -20,9 +20,6 @@ defmodule Servy.Mixfile do
 
   # Run "mix help deps" to learn about dependencies.
   defp deps do
-    [
-      # {:dep_from_hexpm, "~> 0.3.0"},
-      # {:dep_from_git, git: "https://github.com/elixir-lang/my_dep.git", tag: "0.1.0"},
-    ]
+    [{:poison, "~> 5.0"}]
   end
 end
new file mode 100644
--- /dev/null
+++ b/mix.lock
@@ -0,0 +1,3 @@
+%{
+  "poison": {:hex, :poison, "5.0.0", "d2b54589ab4157bbb82ec2050757779bfed724463a544b6e20d79855a9e43b24", [:mix], [{:decimal, "~> 2.0", [hex: :decimal, repo: "hexpm", optional: true]}], "hexpm", "11dc6117c501b80c62a7594f941d043982a1bd05a1184280c0d9166eb4d8d3fc"},
+}
--- a/test/handler_test.exs
+++ b/test/handler_test.exs
@@ -15,12 +15,12 @@ defmodule HandlerTest do
     response = handle(request)
 
     assert response == """
-    HTTP/1.1 200 OK\r
-    Content-Type: text/html\r
-    Content-Length: 20\r
-    \r
-    Bears, Lions, Tigers
-    """
+           HTTP/1.1 200 OK\r
+           Content-Type: text/html\r
+           Content-Length: 20\r
+           \r
+           Bears, Lions, Tigers
+           """
   end
 
   test "GET /bears" do
@@ -40,7 +40,7 @@ defmodule HandlerTest do
     Content-Length: 356\r
     \r
     <h1>All The Bears!</h1>
-    
+
     <ul>
       <li>Brutus - Grizzly</li>
       <li>Iceman - Polar</li>
@@ -70,12 +70,12 @@ defmodule HandlerTest do
     response = handle(request)
 
     assert response == """
-    HTTP/1.1 404 Not Found\r
-    Content-Type: text/html\r
-    Content-Length: 17\r
-    \r
-    No /bigfoot here!
-    """
+           HTTP/1.1 404 Not Found\r
+           Content-Type: text/html\r
+           Content-Length: 17\r
+           \r
+           No /bigfoot here!
+           """
   end
 
   test "GET /bears/1" do
@@ -115,12 +115,12 @@ defmodule HandlerTest do
     response = handle(request)
 
     assert response == """
-    HTTP/1.1 200 OK\r
-    Content-Type: text/html\r
-    Content-Length: 20\r
-    \r
-    Bears, Lions, Tigers
-    """
+           HTTP/1.1 200 OK\r
+           Content-Type: text/html\r
+           Content-Length: 20\r
+           \r
+           Bears, Lions, Tigers
+           """
   end
 
   test "GET /about" do
@@ -143,7 +143,7 @@ defmodule HandlerTest do
 
     <blockquote>
     When we contemplate the whole globe...
-    </blockquote>    
+    </blockquote>
     """
 
     assert remove_whitespace(response) == remove_whitespace(expected_response)
@@ -164,15 +164,61 @@ defmodule HandlerTest do
     response = handle(request)
 
     assert response == """
-    HTTP/1.1 201 Created\r
-    Content-Type: text/html\r
-    Content-Length: 33\r
+           HTTP/1.1 201 Created\r
+           Content-Type: text/html\r
+           Content-Length: 33\r
+           \r
+           Created a Brown bear named Baloo!
+           """
+  end
+
+  test "GET /api/bears" do
+    request = """
+    GET /api/bears HTTP/1.1\r
+    Host: example.com\r
+    User-Agent: ExampleBrowser/1.0\r
+    Accept: */*\r
+    \r
+    """
+
+    response = handle(request)
+
+    expected_response = """
+    HTTP/1.1 200 OK\r
+    Content-Type: application/json\r
+    Content-Length: 605\r
     \r
-    Created a Brown bear named Baloo!
+    [{"hibernating":true,"type":"Brown","name":"Teddy","id":1},
+     {"hibernating":false,"type":"Black","name":"Smokey","id":2},
+     {"hibernating":false,"type":"Brown","name":"Paddington","id":3},
+     {"hibernating":true,"type":"Grizzly","name":"Scarface","id":4},
+     {"hibernating":false,"type":"Polar","name":"Snow","id":5},
+     {"hibernating":false,"type":"Grizzly","name":"Brutus","id":6},
+     {"hibernating":true,"type":"Black","name":"Rosie","id":7},
+     {"hibernating":false,"type":"Panda","name":"Roscoe","id":8},
+     {"hibernating":true,"type":"Polar","name":"Iceman","id":9},
+     {"hibernating":false,"type":"Grizzly","name":"Kenai","id":10}]
     """
+
+    assert remove_whitespace(response) == remove_whitespace(expected_response)
+
+    # Alternatively, because the encoded JSON doesn't ensure the
+    # ordering of the map keys, instead of comparing encoded JSON
+    # strings you could convert the encoded JSON back to a map using
+    # Poison.decode/1 and then compare the maps which won't fail
+    # if the ordering of keys is different.
+
+    [response_header, response_body] =
+      String.split(response, "\r\n\r\n")
+
+    [expected_response_header, expected_response_body] =
+      String.split(expected_response, "\r\n\r\n")
+
+    assert response_header == expected_response_header
+    assert Poison.decode(response_body) == Poison.decode(expected_response_body)
   end
 
   defp remove_whitespace(text) do
     String.replace(text, ~r{\s}, "")
-  end 
+  end
 end
