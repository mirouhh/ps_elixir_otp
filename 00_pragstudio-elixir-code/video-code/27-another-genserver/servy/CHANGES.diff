--- a/lib/servy/handler.ex
+++ b/lib/servy/handler.ex
@@ -31,17 +31,9 @@ defmodule Servy.Handler do
   end
   
   def route(%Conv{ method: "GET", path: "/sensors" } = conv) do
-    task = Task.async(fn -> Servy.Tracker.get_location("bigfoot") end)
+    sensor_data = Servy.SensorServer.get_sensor_data()
 
-    snapshots =
-      ["cam-1", "cam-2", "cam-3"]
-      |> Enum.map(&Task.async(fn -> VideoCam.get_snapshot(&1) end))
-      |> Enum.map(&Task.await/1)
-
-
-    where_is_bigfoot = Task.await(task)
-
-    %{ conv | status: 200, resp_body: inspect {snapshots, where_is_bigfoot} }
+    %{ conv | status: 200, resp_body: inspect sensor_data }
   end
 
   def route(%Conv{ method: "GET", path: "/kaboom" }) do
--- a/lib/servy/pledge_server.ex
+++ b/lib/servy/pledge_server.ex
@@ -88,23 +88,23 @@ defmodule Servy.PledgeServer do
 
 end
 
-alias Servy.PledgeServer
+# alias Servy.PledgeServer
 
-{:ok, pid} = PledgeServer.start()
+# {:ok, pid} = PledgeServer.start()
 
-send pid, {:stop, "hammertime"}
+# send pid, {:stop, "hammertime"}
 
-PledgeServer.set_cache_size(4)
+# PledgeServer.set_cache_size(4)
 
-IO.inspect PledgeServer.create_pledge("larry", 10)
+# IO.inspect PledgeServer.create_pledge("larry", 10)
 
-# PledgeServer.clear()
+# # PledgeServer.clear()
 
-# IO.inspect PledgeServer.create_pledge("moe", 20)
-# IO.inspect PledgeServer.create_pledge("curly", 30)
-# IO.inspect PledgeServer.create_pledge("daisy", 40)
-# IO.inspect PledgeServer.create_pledge("grace", 50)
+# # IO.inspect PledgeServer.create_pledge("moe", 20)
+# # IO.inspect PledgeServer.create_pledge("curly", 30)
+# # IO.inspect PledgeServer.create_pledge("daisy", 40)
+# # IO.inspect PledgeServer.create_pledge("grace", 50)
 
-IO.inspect PledgeServer.recent_pledges()
+# IO.inspect PledgeServer.recent_pledges()
 
-IO.inspect PledgeServer.total_pledged()
+# IO.inspect PledgeServer.total_pledged()
new file mode 100644
--- /dev/null
+++ b/lib/servy/sensor_server.ex
@@ -0,0 +1,55 @@
+defmodule Servy.SensorServer do
+
+  @name :sensor_server
+  @refresh_interval :timer.seconds(5) # :timer.minutes(60)
+
+  use GenServer
+
+  # Client Interface
+
+  def start do
+    GenServer.start(__MODULE__, %{}, name: @name)
+  end
+
+  def get_sensor_data do
+    GenServer.call @name, :get_sensor_data
+  end
+
+  # Server Callbacks
+
+  def init(_state) do
+    initial_state = run_tasks_to_get_sensor_data()
+    schedule_refresh()
+    {:ok, initial_state}
+  end
+
+  def handle_info(:refresh, _state) do
+    IO.puts "Refreshing the cache..."
+    new_state = run_tasks_to_get_sensor_data()
+    schedule_refresh()
+    {:noreply, new_state}
+  end
+
+  defp schedule_refresh do
+    Process.send_after(self(), :refresh, @refresh_interval)    
+  end
+
+  def handle_call(:get_sensor_data, _from, state) do
+    {:reply, state, state}
+  end
+
+  defp run_tasks_to_get_sensor_data do
+    IO.puts "Running tasks to get sensor data..."
+
+    task = Task.async(fn -> Servy.Tracker.get_location("bigfoot") end)
+
+    snapshots =
+      ["cam-1", "cam-2", "cam-3"]
+      |> Enum.map(&Task.async(fn -> Servy.VideoCam.get_snapshot(&1) end))
+      |> Enum.map(&Task.await/1)
+
+    where_is_bigfoot = Task.await(task)
+
+    %{snapshots: snapshots, location: where_is_bigfoot}
+  end
+end
--- a/lib/servy/video_cam.ex
+++ b/lib/servy/video_cam.ex
@@ -10,6 +10,6 @@ defmodule Servy.VideoCam do
     :timer.sleep(1000)
 
     # Example response returned from the API:
-    "#{camera_name}-snapshot.jpg"
+    "#{camera_name}-snapshot-#{:rand.uniform(1000)}.jpg"
   end
 end
