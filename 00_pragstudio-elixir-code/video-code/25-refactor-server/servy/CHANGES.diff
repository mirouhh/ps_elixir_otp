--- a/lib/servy/pledge_server.ex
+++ b/lib/servy/pledge_server.ex
@@ -1,56 +1,85 @@
+defmodule Servy.GenericServer do
+  def start(callback_module, initial_state, name) do
+    pid = spawn(__MODULE__, :listen_loop, [initial_state, callback_module])
+    Process.register(pid, name)
+    pid
+  end
+
+  def call(pid, message) do
+    send pid, {:call, self(), message}
+
+    receive do {:response, response} -> response end
+  end
+
+  def cast(pid, message) do
+    send pid, {:cast, message}
+  end
+
+  def listen_loop(state, callback_module) do
+    receive do
+      {:call, sender, message} when is_pid(sender) ->
+        {response, new_state} = callback_module.handle_call(message, state)
+        send sender, {:response, response}
+        listen_loop(new_state, callback_module)
+      {:cast, message} ->
+        new_state = callback_module.handle_cast(message, state)
+        listen_loop(new_state, callback_module)
+      unexpected ->
+        IO.puts "Unexpected messaged: #{inspect unexpected}"
+        listen_loop(state, callback_module)
+    end
+  end
+end
+
 defmodule Servy.PledgeServer do
 
   @name :pledge_server
 
+  alias Servy.GenericServer
+
   # Client Interface
 
   def start do
     IO.puts "Starting the pledge server..."
-    pid = spawn(__MODULE__, :listen_loop, [[]])
-    Process.register(pid, @name)
-    pid
+    GenericServer.start(__MODULE__, [], @name)
   end
 
   def create_pledge(name, amount) do
-    send @name, {self(), :create_pledge, name, amount}
-
-    receive do {:response, status} -> status end
+    GenericServer.call @name, {:create_pledge, name, amount}
   end
 
   def recent_pledges do
-    send @name, {self(), :recent_pledges}
-
-    receive do {:response, pledges} -> pledges end
+    GenericServer.call @name, :recent_pledges
   end
 
   def total_pledged do
-    send @name, {self(), :total_pledged}
+    GenericServer.call @name, :total_pledged
+  end
 
-    receive do {:response, total} -> total end
+  def clear do
+    GenericServer.cast @name, :clear
   end
 
-  # Server
+  # Server Callbacks
 
-  def listen_loop(state) do
-    receive do
-      {sender, :create_pledge, name, amount} ->
-        {:ok, id} = send_pledge_to_service(name, amount)
-        most_recent_pledges = Enum.take(state, 2)
-        new_state = [ {name, amount} | most_recent_pledges ]
-        send sender, {:response, id}
-        listen_loop(new_state)
-      {sender, :recent_pledges} ->
-        send sender, {:response, state}
-        listen_loop(state)
-      {sender, :total_pledged} ->
-        total = Enum.map(state, &elem(&1, 1)) |> Enum.sum
-        send sender, {:response, total}
-        listen_loop(state)
-      unexpected ->
-        IO.puts "Unexpected messaged: #{inspect unexpected}"
-        listen_loop(state)
-    end
-    
+  def handle_cast(:clear, _state) do
+    []
+  end
+
+  def handle_call(:total_pledged, state) do
+    total = Enum.map(state, &elem(&1, 1)) |> Enum.sum
+    {total, state}
+  end
+
+  def handle_call(:recent_pledges, state) do
+    {state, state}
+  end
+
+  def handle_call({:create_pledge, name, amount}, state) do
+    {:ok, id} = send_pledge_to_service(name, amount)
+    most_recent_pledges = Enum.take(state, 2)
+    new_state = [ {name, amount} | most_recent_pledges ]
+    {id, new_state}
   end
 
   defp send_pledge_to_service(_name, _amount) do
@@ -70,10 +99,11 @@ IO.inspect PledgeServer.create_pledge("larry", 10)
 IO.inspect PledgeServer.create_pledge("moe", 20)
 IO.inspect PledgeServer.create_pledge("curly", 30)
 IO.inspect PledgeServer.create_pledge("daisy", 40)
+
+PledgeServer.clear()
+
 IO.inspect PledgeServer.create_pledge("grace", 50)
 
 IO.inspect PledgeServer.recent_pledges()
 
 IO.inspect PledgeServer.total_pledged()
-
-IO.inspect Process.info(pid, :messages)
