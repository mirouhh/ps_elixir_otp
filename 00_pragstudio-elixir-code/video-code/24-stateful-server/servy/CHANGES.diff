--- a/lib/servy/handler.ex
+++ b/lib/servy/handler.ex
@@ -22,6 +22,14 @@ defmodule Servy.Handler do
     |> format_response
   end
 
+  def route(%Conv{method: "POST", path: "/pledges"} = conv) do
+    Servy.PledgeController.create(conv, conv.params)
+  end
+
+  def route(%Conv{method: "GET", path: "/pledges"} = conv) do
+    Servy.PledgeController.index(conv)
+  end
+  
   def route(%Conv{ method: "GET", path: "/sensors" } = conv) do
     task = Task.async(fn -> Servy.Tracker.get_location("bigfoot") end)
 
new file mode 100644
--- /dev/null
+++ b/lib/servy/pledge_controller.ex
@@ -0,0 +1,17 @@
+defmodule Servy.PledgeController do
+
+  def create(conv, %{"name" => name, "amount" => amount}) do
+    # Sends the pledge to the external service and caches it
+    Servy.PledgeServer.create_pledge(name, String.to_integer(amount))
+
+    %{ conv | status: 201, resp_body: "#{name} pledged #{amount}!" }
+  end
+
+  def index(conv) do
+    # Gets the recent pledges from the cache
+    pledges = Servy.PledgeServer.recent_pledges()
+
+    %{ conv | status: 200, resp_body: (inspect pledges) }
+  end
+
+end
new file mode 100644
--- /dev/null
+++ b/lib/servy/pledge_server.ex
@@ -0,0 +1,79 @@
+defmodule Servy.PledgeServer do
+
+  @name :pledge_server
+
+  # Client Interface
+
+  def start do
+    IO.puts "Starting the pledge server..."
+    pid = spawn(__MODULE__, :listen_loop, [[]])
+    Process.register(pid, @name)
+    pid
+  end
+
+  def create_pledge(name, amount) do
+    send @name, {self(), :create_pledge, name, amount}
+
+    receive do {:response, status} -> status end
+  end
+
+  def recent_pledges do
+    send @name, {self(), :recent_pledges}
+
+    receive do {:response, pledges} -> pledges end
+  end
+
+  def total_pledged do
+    send @name, {self(), :total_pledged}
+
+    receive do {:response, total} -> total end
+  end
+
+  # Server
+
+  def listen_loop(state) do
+    receive do
+      {sender, :create_pledge, name, amount} ->
+        {:ok, id} = send_pledge_to_service(name, amount)
+        most_recent_pledges = Enum.take(state, 2)
+        new_state = [ {name, amount} | most_recent_pledges ]
+        send sender, {:response, id}
+        listen_loop(new_state)
+      {sender, :recent_pledges} ->
+        send sender, {:response, state}
+        listen_loop(state)
+      {sender, :total_pledged} ->
+        total = Enum.map(state, &elem(&1, 1)) |> Enum.sum
+        send sender, {:response, total}
+        listen_loop(state)
+      unexpected ->
+        IO.puts "Unexpected messaged: #{inspect unexpected}"
+        listen_loop(state)
+    end
+    
+  end
+
+  defp send_pledge_to_service(_name, _amount) do
+    # CODE GOES HERE TO SEND PLEDGE TO EXTERNAL SERVICE
+    {:ok, "pledge-#{:rand.uniform(1000)}"}
+  end
+
+end
+
+alias Servy.PledgeServer
+
+pid = PledgeServer.start()
+
+send pid, {:stop, "hammertime"}
+
+IO.inspect PledgeServer.create_pledge("larry", 10)
+IO.inspect PledgeServer.create_pledge("moe", 20)
+IO.inspect PledgeServer.create_pledge("curly", 30)
+IO.inspect PledgeServer.create_pledge("daisy", 40)
+IO.inspect PledgeServer.create_pledge("grace", 50)
+
+IO.inspect PledgeServer.recent_pledges()
+
+IO.inspect PledgeServer.total_pledged()
+
+IO.inspect Process.info(pid, :messages)
