--- a/lib/servy/pledge_server.ex
+++ b/lib/servy/pledge_server.ex
@@ -1,85 +1,77 @@
-defmodule Servy.GenericServer do
-  def start(callback_module, initial_state, name) do
-    pid = spawn(__MODULE__, :listen_loop, [initial_state, callback_module])
-    Process.register(pid, name)
-    pid
-  end
-
-  def call(pid, message) do
-    send pid, {:call, self(), message}
-
-    receive do {:response, response} -> response end
-  end
-
-  def cast(pid, message) do
-    send pid, {:cast, message}
-  end
-
-  def listen_loop(state, callback_module) do
-    receive do
-      {:call, sender, message} when is_pid(sender) ->
-        {response, new_state} = callback_module.handle_call(message, state)
-        send sender, {:response, response}
-        listen_loop(new_state, callback_module)
-      {:cast, message} ->
-        new_state = callback_module.handle_cast(message, state)
-        listen_loop(new_state, callback_module)
-      unexpected ->
-        IO.puts "Unexpected messaged: #{inspect unexpected}"
-        listen_loop(state, callback_module)
-    end
-  end
-end
-
 defmodule Servy.PledgeServer do
 
   @name :pledge_server
 
-  alias Servy.GenericServer
+  use GenServer
+
+  defmodule State do
+    defstruct cache_size: 3, pledges: []
+  end
 
   # Client Interface
 
   def start do
     IO.puts "Starting the pledge server..."
-    GenericServer.start(__MODULE__, [], @name)
+    GenServer.start(__MODULE__, %State{}, name: @name)
   end
 
   def create_pledge(name, amount) do
-    GenericServer.call @name, {:create_pledge, name, amount}
+    GenServer.call @name, {:create_pledge, name, amount}
   end
 
   def recent_pledges do
-    GenericServer.call @name, :recent_pledges
+    GenServer.call @name, :recent_pledges
   end
 
   def total_pledged do
-    GenericServer.call @name, :total_pledged
+    GenServer.call @name, :total_pledged
   end
 
   def clear do
-    GenericServer.cast @name, :clear
+    GenServer.cast @name, :clear
+  end
+
+  def set_cache_size(size) do
+    GenServer.cast @name, {:set_cache_size, size}
   end
 
   # Server Callbacks
 
-  def handle_cast(:clear, _state) do
-    []
+  def init(state) do
+    pledges = fetch_recent_pledges_from_service()
+    new_state = %{state | pledges: pledges}
+    {:ok, new_state}
+  end
+
+  def handle_cast(:clear, state) do
+    {:noreply, %{ state | pledges: []}}
+  end
+
+  def handle_cast({:set_cache_size, size}, state) do
+    new_state = %{ state | cache_size: size}
+    {:noreply, new_state}
   end
 
-  def handle_call(:total_pledged, state) do
-    total = Enum.map(state, &elem(&1, 1)) |> Enum.sum
-    {total, state}
+  def handle_call(:total_pledged, _from, state) do
+    total = Enum.map(state.pledges, &elem(&1, 1)) |> Enum.sum
+    {:reply, total, state}
   end
 
-  def handle_call(:recent_pledges, state) do
-    {state, state}
+  def handle_call(:recent_pledges, _from, state) do
+    {:reply, state.pledges, state}
   end
 
-  def handle_call({:create_pledge, name, amount}, state) do
+  def handle_call({:create_pledge, name, amount}, _from, state) do
     {:ok, id} = send_pledge_to_service(name, amount)
-    most_recent_pledges = Enum.take(state, 2)
-    new_state = [ {name, amount} | most_recent_pledges ]
-    {id, new_state}
+    most_recent_pledges = Enum.take(state.pledges, state.cache_size - 1)
+    cached_pledges = [ {name, amount} | most_recent_pledges ]
+    new_state = %{state | pledges: cached_pledges}
+    {:reply, id, new_state}
+  end
+
+  def handle_info(message, state) do
+    IO.puts "Can't touch this! #{inspect message}"
+    {:noreply, state}
   end
 
   defp send_pledge_to_service(_name, _amount) do
@@ -87,22 +79,31 @@ defmodule Servy.PledgeServer do
     {:ok, "pledge-#{:rand.uniform(1000)}"}
   end
 
+  defp fetch_recent_pledges_from_service do
+    # CODE GOES HERE TO FETCH RECENT PLEDGES FROM EXTERNAL SERVICE
+
+    # Example return value:
+    [ {"wilma", 15}, {"fred", 25} ]
+  end
+
 end
 
 alias Servy.PledgeServer
 
-pid = PledgeServer.start()
+{:ok, pid} = PledgeServer.start()
 
 send pid, {:stop, "hammertime"}
 
+PledgeServer.set_cache_size(4)
+
 IO.inspect PledgeServer.create_pledge("larry", 10)
-IO.inspect PledgeServer.create_pledge("moe", 20)
-IO.inspect PledgeServer.create_pledge("curly", 30)
-IO.inspect PledgeServer.create_pledge("daisy", 40)
 
-PledgeServer.clear()
+# PledgeServer.clear()
 
-IO.inspect PledgeServer.create_pledge("grace", 50)
+# IO.inspect PledgeServer.create_pledge("moe", 20)
+# IO.inspect PledgeServer.create_pledge("curly", 30)
+# IO.inspect PledgeServer.create_pledge("daisy", 40)
+# IO.inspect PledgeServer.create_pledge("grace", 50)
 
 IO.inspect PledgeServer.recent_pledges()
 
new file mode 100644
--- /dev/null
+++ b/lib/servy/pledge_server_hand_rolled.ex
@@ -0,0 +1,116 @@
+defmodule Servy.GenericServer do
+  def start(callback_module, initial_state, name) do
+    pid = spawn(__MODULE__, :listen_loop, [initial_state, callback_module])
+    Process.register(pid, name)
+    pid
+  end
+
+  def call(pid, message) do
+    send pid, {:call, self(), message}
+
+    receive do {:response, response} -> response end
+  end
+
+  def cast(pid, message) do
+    send pid, {:cast, message}
+  end
+
+  def listen_loop(state, callback_module) do
+    receive do
+      {:call, sender, message} when is_pid(sender) ->
+        {response, new_state} = callback_module.handle_call(message, state)
+        send sender, {:response, response}
+        listen_loop(new_state, callback_module)
+      {:cast, message} ->
+        new_state = callback_module.handle_cast(message, state)
+        listen_loop(new_state, callback_module)
+      unexpected ->
+        IO.puts "Unexpected messaged: #{inspect unexpected}"
+        listen_loop(state, callback_module)
+    end
+  end
+end
+
+defmodule Servy.PledgeServerHandRolled do
+
+  @name :pledge_server_hand_rolled
+
+  alias Servy.GenericServer
+
+  # Client Interface
+
+  def start do
+    IO.puts "Starting the pledge server..."
+    GenericServer.start(__MODULE__, [], @name)
+  end
+
+  def create_pledge(name, amount) do
+    GenericServer.call @name, {:create_pledge, name, amount}
+  end
+
+  def recent_pledges do
+    GenericServer.call @name, :recent_pledges
+  end
+
+  def total_pledged do
+    GenericServer.call @name, :total_pledged
+  end
+
+  def clear do
+    GenericServer.cast @name, :clear
+  end
+
+  # Server Callbacks
+
+  def handle_cast(:clear, _state) do
+    []
+  end
+
+  def handle_call(:total_pledged, state) do
+    total = Enum.map(state, &elem(&1, 1)) |> Enum.sum
+    {total, state}
+  end
+
+  def handle_call(:recent_pledges, state) do
+    {state, state}
+  end
+
+  def handle_call({:create_pledge, name, amount}, state) do
+    {:ok, id} = send_pledge_to_service(name, amount)
+    most_recent_pledges = Enum.take(state, 2)
+    new_state = [ {name, amount} | most_recent_pledges ]
+    {id, new_state}
+  end
+
+  defp send_pledge_to_service(_name, _amount) do
+    # CODE GOES HERE TO SEND PLEDGE TO EXTERNAL SERVICE
+    {:ok, "pledge-#{:rand.uniform(1000)}"}
+  end
+
+  defp fetch_recent_pledges_from_service do
+    # CODE GOES HERE TO FETCH RECENT PLEDGES FROM EXTERNAL SERVICE
+
+    # Example return value:
+    [ {"wilma", 15}, {"fred", 25} ]
+  end
+
+end
+
+# alias Servy.PledgeServerHandRolled
+
+# pid = PledgeServerHandRolled.start()
+
+# #send pid, {:stop, "hammertime"}
+
+# IO.inspect PledgeServerHandRolled.create_pledge("larry", 10)
+# IO.inspect PledgeServerHandRolled.create_pledge("moe", 20)
+# IO.inspect PledgeServerHandRolled.create_pledge("curly", 30)
+# IO.inspect PledgeServerHandRolled.create_pledge("daisy", 40)
+
+# #PledgeServerHandRolled.clear()
+
+# IO.inspect PledgeServerHandRolled.create_pledge("grace", 50)
+
+# IO.inspect PledgeServerHandRolled.recent_pledges()
+
+# IO.inspect PledgeServerHandRolled.total_pledged()
